{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Creating data sets\n",
    "In this section it will be shown how to handle both binned and unbinned data sets with the MinKit package. Both data sets can be easily built using NumPy arrays. In case of dealing with GPU backends, an internal conversion is done in order to adapt the arrays to run in such environment. This is done in order to reduce the interaction of the users with the detailed operations that must be done both in the CPU and GPU side in order to do computations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import minkit\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Unbinned data sets\n",
    "In this case, the data set represents an array of values for each data parameter. These data sets are meant to be used in unbinned maximum likelihood fits. The data can be directly imported from a NumPy array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "numpy_data = np.random.normal(15, 1, 10000)\n",
    "\n",
    "x = minkit.Parameter('x', bounds=(10, 20))\n",
    "\n",
    "data = minkit.DataSet.from_ndarray(numpy_data, x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Values inside the data set have not been trimmed, that is, points outside the bounds defined by the data parameter are not removed, although it will be done if we decide to do certain operations on them, like a fit. The *DataSet* class allows to merge and create subsets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Length of primordial sample: 10000\n",
      "Length of merged data sample: 11000\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD4CAYAAAAXUaZHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAASvElEQVR4nO3df4xlZ33f8fcn/gFpIRjjievurjsWmEYGhYVOHEdQFYwIxqCsIxHLNCIOcbUpsiuIUGBNpQSkWDX5gUvUxNUmdr2kBOPyo15hp41jnCCk2GZs1sY/QtnCUu9m7V3wD0AoVtZ8+8d9bK7XM7t35s6du/PM+yVd3XOec+6936OZ+cxzn/vcc1JVSJL68mPTLkCStPIMd0nqkOEuSR0y3CWpQ4a7JHXo+GkXAHDKKafU7OzstMuQpDXlrrvu+nZVzSy07ZgI99nZWebn56ddhiStKUm+tdg2h2UkqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SeqQ4S5JHTLcJalDx8Q3VKVjzey2m55Z3nPlW6dYibQ89twlqUOGuyR1yHCXpA4Z7pLUoZHDPclxSb6S5PNt/YwkdyTZneRTSU5s7c9r67vb9tnJlC5JWsxSeu7vAR4cWv8IcFVVvQx4DLiktV8CPNbar2r7SWvW7LabnrlJa8VI4Z5kI/BW4E/beoBzgU+3XXYAF7TlLW2dtv2NbX9J0ioZdZ77fwbeD7ywrb8EeLyqDrX1vcCGtrwBeAigqg4leaLt/+3hJ0yyFdgKcPrppy+3fmnZDu+JjzKf3fnvWiuO2nNP8jbgQFXdtZIvXFXbq2ququZmZha8BKAkaZlG6bm/FviFJOcDzwd+AvgYcFKS41vvfSOwr+2/D9gE7E1yPPAi4DsrXrkkaVFH7blX1eVVtbGqZoGLgC9U1S8DtwFvb7tdDNzYlne2ddr2L1RVrWjV0jHAD1p1LBvn3DIfAK5P8jvAV4BrWvs1wJ8l2Q08yuAfgnTMM6TVkyWFe1X9NfDXbfkbwNkL7PMPwC+tQG3SmuEHrTrWeFZIrSv2zrVeePoBSeqQ4S5JHTLcJalDhrskdchwl6QOGe6S1CHDXZI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhT/mr7nmaX61Ho1wg+/lJ7kxyT5L7k3y4tV+X5JtJdrXb5taeJH+YZHeSe5O8ZtIHIUl6tlF67k8C51bV95OcAHwpyV+0bb9ZVZ8+bP+3AGe2288CV7d7SdIqGeUC2VVV32+rJ7TbkS54vQX4eHvc7cBJSU4bv1RJ0qhGGnNPchxwF/Ay4I+q6o4k7wauSPJbwK3Atqp6EtgAPDT08L2tbf9hz7kV2Apw+umnj3sc0jFjsTF+r62q1TTSbJmqeqqqNgMbgbOTvBK4HPgp4GeAk4EPLOWFq2p7Vc1V1dzMzMwSy5YkHcmSpkJW1ePAbcB5VbW/Db08Cfw34Oy22z5g09DDNrY2SdIqOeqwTJIZ4B+r6vEkPw68CfhIktOqan+SABcA97WH7AQuS3I9gw9Sn6iq/Qs+uTQhTn/UejfKmPtpwI427v5jwA1V9fkkX2jBH2AX8O/b/jcD5wO7gR8A71r5siVJR3LUcK+qe4FXL9B+7iL7F3Dp+KVJkpbL0w9IUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOuSVmKQpGz5VgmeO1Eqx5y5JHTLcJalDhrskdchwl6QOGe6S1CFny0hT4MVENGn23CWpQ0cN9yTPT3JnknuS3J/kw639jCR3JNmd5FNJTmztz2vru9v22ckegiTpcKP03J8Ezq2qVwGbgfOSnAN8BLiqql4GPAZc0va/BHistV/V9pMkraJRLrNXwPfb6gntVsC5wL9t7TuADwFXA1vaMsCngf+SJO15pIlxHFv6kZHG3JMcl2QXcAC4Bfi/wONVdajtshfY0JY3AA8BtO1PAC9Z4Dm3JplPMn/w4MHxjkKS9CwjzZapqqeAzUlOAj4H/NS4L1xV24HtAHNzc/bq1T3fWWg1LWm2TFU9DtwG/BxwUpKn/zlsBPa15X3AJoC2/UXAd1akWknSSEaZLTPTeuwk+XHgTcCDDEL+7W23i4Eb2/LOtk7b/gXH2yVpdY0yLHMasCPJcQz+GdxQVZ9P8gBwfZLfAb4CXNP2vwb4syS7gUeBiyZQt9YxT5ErHd0os2XuBV69QPs3gLMXaP8H4JdWpDpJ0rL4DVVJ6pDhLkkdMtwlqUOGuyR1yHCXpA55PnetaX7rU1qYPXdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SerQKFdi2pTktiQPJLk/yXta+4eS7Euyq93OH3rM5Ul2J/lakjdP8gAkSc81yukHDgHvq6q7k7wQuCvJLW3bVVX1+8M7JzmLwdWXXgH8c+Cvkry8XWRbkrQKRrkS035gf1v+XpIHgQ1HeMgW4PqqehL4Zrvc3tnA365AvVLXvISgVsqSxtyTzDK45N4dremyJPcmuTbJi1vbBuChoYft5cj/DCRJK2zkcE/yAuAzwHur6rvA1cBLgc0MevZ/sJQXTrI1yXyS+YMHDy7lodK6MLvtpmdu0lKNFO5JTmAQ7J+oqs8CVNUjVfVUVf0Q+BN+dLHsfcCmoYdvbG3PUlXbq2ququZmZmbGOQZJ0mGOOuaeJMA1wINV9dGh9tPaeDzALwL3teWdwJ8n+SiDD1TPBO5c0aq1Ljj+LC3fKLNlXgu8E/hqkl2t7YPAO5JsBgrYA/w6QFXdn+QG4AEGM20udaaMxuXQhLQ0o8yW+RKQBTbdfITHXAFcMUZdkqQx+A1VSeqQ4S5JHTLcJalDhrskdchwl6QOGe6S1CHDXZI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHjhruSTYluS3JA0nuT/Ke1n5ykluSfL3dv7i1J8kfJtmd5N4kr5n0QUiSnm2Unvsh4H1VdRZwDnBpkrOAbcCtVXUmcGtbB3gLg+umnglsBa5e8aolSUd01HCvqv1VdXdb/h7wILAB2ALsaLvtAC5oy1uAj9fA7cBJSU5b8colSYta0ph7klng1cAdwKlVtb9tehg4tS1vAB4aetje1nb4c21NMp9k/uDBg0ssW5J0JCOHe5IXAJ8B3ltV3x3eVlUF1FJeuKq2V9VcVc3NzMws5aGSpKMYKdyTnMAg2D9RVZ9tzY88PdzS7g+09n3ApqGHb2xtkqRVMspsmQDXAA9W1UeHNu0ELm7LFwM3DrX/Sps1cw7wxNDwjSRpFRw/wj6vBd4JfDXJrtb2QeBK4IYklwDfAi5s224Gzgd2Az8A3rWiFatrs9tumnYJUheOGu5V9SUgi2x+4wL7F3DpmHVJGjL8T2/PlW+dYiVaK0bpuUs6hhj0GoWnH5CkDhnuktQhw12SOmS4S1KHDHdJ6pCzZaQ1zJkzWozhrqnzi0vSynNYRpI6ZLhLUocMd0nqkOEuSR3yA1VNhR+iSpNlz12SOmS4S1KHDHdJ6tAol9m7NsmBJPcNtX0oyb4ku9rt/KFtlyfZneRrSd48qcIlPdvstpueuUmj9NyvA85boP2qqtrcbjcDJDkLuAh4RXvMHyc5bqWKlSSN5qjhXlVfBB4d8fm2ANdX1ZNV9U0G11E9e4z6JEnLMM6Y+2VJ7m3DNi9ubRuAh4b22dvaniPJ1iTzSeYPHjw4RhmSpMMtN9yvBl4KbAb2A3+w1Ceoqu1VNVdVczMzM8ssQ5K0kGWFe1U9UlVPVdUPgT/hR0Mv+4BNQ7tubG2SpFW0rHBPctrQ6i8CT8+k2QlclOR5Sc4AzgTuHK9ESdJSHfX0A0k+CbweOCXJXuC3gdcn2QwUsAf4dYCquj/JDcADwCHg0qp6ajKlS5IWc9Rwr6p3LNB8zRH2vwK4YpyiJEnj8cRhWjV+uUZaPZ5+QJI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOeFVLq0PAZOPdc+dYpVqJpsecuSR0a5UpM1wJvAw5U1Stb28nAp4BZBldiurCqHksS4GPA+cAPgF+tqrsnU7rWAs/hLk3HKD3364DzDmvbBtxaVWcCt7Z1gLcwuG7qmcBW4OqVKVOStBRHDfeq+iLw6GHNW4AdbXkHcMFQ+8dr4HbgpMMupi1JWgXLHXM/tar2t+WHgVPb8gbgoaH99ra250iyNcl8kvmDBw8uswxJ0kLG/kC1qgqoZTxue1XNVdXczMzMuGVIkoYsN9wfeXq4pd0faO37gE1D+21sbZKkVbTccN8JXNyWLwZuHGr/lQycAzwxNHwjSVolo0yF/CTweuCUJHuB3wauBG5IcgnwLeDCtvvNDKZB7mYwFfJdE6hZxyCnPErHlqOGe1W9Y5FNb1xg3wIuHbcoSdJ4/IaqJHXIc8tI64jnnFk/7LlLUocMd0nqkMMyUuecybQ+2XOXpA4Z7pLUIcNdkjrkmLuWzbFc6dhluEvrlHPe++awjCR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SerQWFMhk+wBvgc8BRyqqrkkJwOfAmaBPcCFVfXYeGVKmiSnRfZnJea5v6Gqvj20vg24taquTLKtrX9gBV5HxwC/uCStDZMYltkC7GjLO4ALJvAakqQjGDfcC/jLJHcl2draTq2q/W35YeDUhR6YZGuS+STzBw8eHLMMSdKwcYdlXldV+5L8JHBLkr8b3lhVlaQWemBVbQe2A8zNzS24jyRpecbquVfVvnZ/APgccDbwSJLTANr9gXGLlCQtzbLDPck/TfLCp5eBnwfuA3YCF7fdLgZuHLdISdLSjDMscyrwuSRPP8+fV9X/SvJl4IYklwDfAi4cv0xJq+XwGVFOjVyblh3uVfUN4FULtH8HeOM4RUmSxuP53HVUzm2X1h5PPyBJHbLnLmlknqZg7TDc9QyHX7QQfy/WJsN9nfMPV+qT4S5pWRyiObb5gaokdchwl6QOGe6S1CHDXZI65Aeqksbmh6vHHsO9U0f6Y3P6o9Q/w13SirIXf2ww3DuyWI/cnrq0/hjukiZmsY6FPfrJM9zXOHvlkhYysXBPch7wMeA44E+r6spJvZaktWWxcXl7+itnIuGe5Djgj4A3AXuBLyfZWVUPTOL1ejLKL7e9dUlHk6pa+SdNfg74UFW9ua1fDlBV/2mh/efm5mp+fn7F61gp4wTuYj0OA1oa32J/g+ulp5/krqqaW3DbhML97cB5VfXv2vo7gZ+tqsuG9tkKbG2r/xL42jJf7hTg22OUuxZ5zOuDx7w+jHPM/6KqZhbaMLUPVKtqO7B93OdJMr/Yf65eeczrg8e8PkzqmCd1bpl9wKah9Y2tTZK0CiYV7l8GzkxyRpITgYuAnRN6LUnSYSYyLFNVh5JcBvxvBlMhr62q+yfxWqzA0M4a5DGvDx7z+jCRY57IB6qSpOnyfO6S1CHDXZI6tKbCPcm1SQ4kuW+o7eQktyT5ert/8TRrXGmLHPPvJfm7JPcm+VySk6ZZ40pb6JiHtr0vSSU5ZRq1Tcpix5zkP7Sf9f1Jfnda9U3CIr/bm5PcnmRXkvkkZ0+zxpWUZFOS25I80H6e72ntE8mwNRXuwHXAeYe1bQNuraozgVvbek+u47nHfAvwyqr6aeD/AJevdlETdh3PPWaSbAJ+Hvh/q13QKriOw445yRuALcCrquoVwO9Poa5Juo7n/px/F/hwVW0Gfqut9+IQ8L6qOgs4B7g0yVlMKMPWVLhX1ReBRw9r3gLsaMs7gAtWtagJW+iYq+ovq+pQW72dwfcIurHIzxngKuD9QHezABY55ncDV1bVk22fA6te2AQtcswF/ERbfhHw96ta1ARV1f6qurstfw94ENjAhDJsTYX7Ik6tqv1t+WHg1GkWMwW/BvzFtIuYtCRbgH1Vdc+0a1lFLwf+dZI7kvxNkp+ZdkGr4L3A7yV5iME7ld7elQKQZBZ4NXAHE8qwHsL9GTWY19ldr24xSf4jg7d6n5h2LZOU5J8AH2TwNn09OR44mcFb+N8EbkiS6ZY0ce8GfqOqNgG/AVwz5XpWXJIXAJ8B3ltV3x3etpIZ1kO4P5LkNIB239Vb18Uk+VXgbcAvV/9fVngpcAZwT5I9DIah7k7yz6Za1eTtBT5bA3cCP2RwkqmeXQx8ti3/D6CbD1QBkpzAINg/UVVPH+dEMqyHcN/J4BeCdn/jFGtZFe1CKO8HfqGqfjDteiatqr5aVT9ZVbNVNcsg9F5TVQ9PubRJ+5/AGwCSvBw4kf7PmPj3wL9py+cCX59iLSuqveu6Bniwqj46tGkyGVZVa+YGfBLYD/wjgz/wS4CXMPiE+evAXwEnT7vOVTjm3cBDwK52+6/TrnPSx3zY9j3AKdOucxV+zicC/x24D7gbOHfada7CMb8OuAu4h8F49L+adp0reLyvYzDkcu/Q3+75k8owTz8gSR3qYVhGknQYw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR16P8Dfl09WqDbmzoAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "new_numpy_data = np.random.normal(15, 1, 1000)\n",
    "\n",
    "print(f'Length of primordial sample: {len(data)}')\n",
    "\n",
    "new_data = minkit.DataSet.from_ndarray(new_numpy_data, x)\n",
    "\n",
    "merged_data = minkit.DataSet.merge([data, new_data])\n",
    "\n",
    "print(f'Length of merged data sample: {len(merged_data)}')\n",
    "\n",
    "values, edges = minkit.data_plotting_arrays(data, bins=100)\n",
    "\n",
    "centers = 0.5 * (edges[1:] + edges[:-1])\n",
    "\n",
    "plt.hist(centers, bins=edges, weights=values);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In unbinned data sets we can also define a set of weights to use."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "weights = np.random.uniform(0, 1, len(numpy_data))\n",
    "\n",
    "data = minkit.DataSet.from_ndarray(numpy_data, x, weights=weights)\n",
    "\n",
    "values, edges = minkit.data_plotting_arrays(data, bins=100)\n",
    "\n",
    "centers = 0.5 * (edges[1:] + edges[:-1])\n",
    "\n",
    "plt.hist(centers, bins=edges, weights=values);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Binned data sets\n",
    "A binned data set is composed by two arrays, one defining the centers of the bins, and another the values in them. Let's calculate the values and edges from the previous data sample and then build a binned data set with them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "values, edges = np.histogram(numpy_data, bins=100, range=x.bounds)\n",
    "\n",
    "binned_data = minkit.BinnedDataSet.from_ndarray(edges, x, values)\n",
    "\n",
    "v, e = minkit.data_plotting_arrays(binned_data)\n",
    "\n",
    "c = 0.5 * (e[1:] + e[:-1])\n",
    "\n",
    "plt.hist(c, bins=e, weights=v);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The centers of the data set are accessed using the [] operator. Using *minkit.data_plotting_arrays* we can rebin the histogram, so we draw it with less bins."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "v, e = minkit.data_plotting_arrays(binned_data, rebin=2)\n",
    "\n",
    "c = 0.5 * (e[1:] + e[:-1])\n",
    "\n",
    "plt.hist(c, bins=e, weights=v);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This way we have reduced the number of bins from 100 to 50. Note that we can create binned data sets from unbinned data sets calling the *make_binned* method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD4CAYAAAAXUaZHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAASvElEQVR4nO3df4xlZ33f8fcn/gFpIRjjievurjsWmEYGhYVOHEdQFYwIxqCsIxHLNCIOcbUpsiuIUGBNpQSkWDX5gUvUxNUmdr2kBOPyo15hp41jnCCk2GZs1sY/QtnCUu9m7V3wD0AoVtZ8+8d9bK7XM7t35s6du/PM+yVd3XOec+6936OZ+cxzn/vcc1JVSJL68mPTLkCStPIMd0nqkOEuSR0y3CWpQ4a7JHXo+GkXAHDKKafU7OzstMuQpDXlrrvu+nZVzSy07ZgI99nZWebn56ddhiStKUm+tdg2h2UkqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SeqQ4S5JHTLcJalDx8Q3VKVjzey2m55Z3nPlW6dYibQ89twlqUOGuyR1yHCXpA4Z7pLUoZHDPclxSb6S5PNt/YwkdyTZneRTSU5s7c9r67vb9tnJlC5JWsxSeu7vAR4cWv8IcFVVvQx4DLiktV8CPNbar2r7SWvW7LabnrlJa8VI4Z5kI/BW4E/beoBzgU+3XXYAF7TlLW2dtv2NbX9J0ioZdZ77fwbeD7ywrb8EeLyqDrX1vcCGtrwBeAigqg4leaLt/+3hJ0yyFdgKcPrppy+3fmnZDu+JjzKf3fnvWiuO2nNP8jbgQFXdtZIvXFXbq2ququZmZha8BKAkaZlG6bm/FviFJOcDzwd+AvgYcFKS41vvfSOwr+2/D9gE7E1yPPAi4DsrXrkkaVFH7blX1eVVtbGqZoGLgC9U1S8DtwFvb7tdDNzYlne2ddr2L1RVrWjV0jHAD1p1LBvn3DIfAK5P8jvAV4BrWvs1wJ8l2Q08yuAfgnTMM6TVkyWFe1X9NfDXbfkbwNkL7PMPwC+tQG3SmuEHrTrWeFZIrSv2zrVeePoBSeqQ4S5JHTLcJalDhrskdchwl6QOGe6S1CHDXZI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhT/mr7nmaX61Ho1wg+/lJ7kxyT5L7k3y4tV+X5JtJdrXb5taeJH+YZHeSe5O8ZtIHIUl6tlF67k8C51bV95OcAHwpyV+0bb9ZVZ8+bP+3AGe2288CV7d7SdIqGeUC2VVV32+rJ7TbkS54vQX4eHvc7cBJSU4bv1RJ0qhGGnNPchxwF/Ay4I+q6o4k7wauSPJbwK3Atqp6EtgAPDT08L2tbf9hz7kV2Apw+umnj3sc0jFjsTF+r62q1TTSbJmqeqqqNgMbgbOTvBK4HPgp4GeAk4EPLOWFq2p7Vc1V1dzMzMwSy5YkHcmSpkJW1ePAbcB5VbW/Db08Cfw34Oy22z5g09DDNrY2SdIqOeqwTJIZ4B+r6vEkPw68CfhIktOqan+SABcA97WH7AQuS3I9gw9Sn6iq/Qs+uTQhTn/UejfKmPtpwI427v5jwA1V9fkkX2jBH2AX8O/b/jcD5wO7gR8A71r5siVJR3LUcK+qe4FXL9B+7iL7F3Dp+KVJkpbL0w9IUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOuSVmKQpGz5VgmeO1Eqx5y5JHTLcJalDhrskdchwl6QOGe6S1CFny0hT4MVENGn23CWpQ0cN9yTPT3JnknuS3J/kw639jCR3JNmd5FNJTmztz2vru9v22ckegiTpcKP03J8Ezq2qVwGbgfOSnAN8BLiqql4GPAZc0va/BHistV/V9pMkraJRLrNXwPfb6gntVsC5wL9t7TuADwFXA1vaMsCngf+SJO15pIlxHFv6kZHG3JMcl2QXcAC4Bfi/wONVdajtshfY0JY3AA8BtO1PAC9Z4Dm3JplPMn/w4MHxjkKS9CwjzZapqqeAzUlOAj4H/NS4L1xV24HtAHNzc/bq1T3fWWg1LWm2TFU9DtwG/BxwUpKn/zlsBPa15X3AJoC2/UXAd1akWknSSEaZLTPTeuwk+XHgTcCDDEL+7W23i4Eb2/LOtk7b/gXH2yVpdY0yLHMasCPJcQz+GdxQVZ9P8gBwfZLfAb4CXNP2vwb4syS7gUeBiyZQt9YxT5ErHd0os2XuBV69QPs3gLMXaP8H4JdWpDpJ0rL4DVVJ6pDhLkkdMtwlqUOGuyR1yHCXpA55PnetaX7rU1qYPXdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SerQKFdi2pTktiQPJLk/yXta+4eS7Euyq93OH3rM5Ul2J/lakjdP8gAkSc81yukHDgHvq6q7k7wQuCvJLW3bVVX1+8M7JzmLwdWXXgH8c+Cvkry8XWRbkrQKRrkS035gf1v+XpIHgQ1HeMgW4PqqehL4Zrvc3tnA365AvVLXvISgVsqSxtyTzDK45N4dremyJPcmuTbJi1vbBuChoYft5cj/DCRJK2zkcE/yAuAzwHur6rvA1cBLgc0MevZ/sJQXTrI1yXyS+YMHDy7lodK6MLvtpmdu0lKNFO5JTmAQ7J+oqs8CVNUjVfVUVf0Q+BN+dLHsfcCmoYdvbG3PUlXbq2ququZmZmbGOQZJ0mGOOuaeJMA1wINV9dGh9tPaeDzALwL3teWdwJ8n+SiDD1TPBO5c0aq1Ljj+LC3fKLNlXgu8E/hqkl2t7YPAO5JsBgrYA/w6QFXdn+QG4AEGM20udaaMxuXQhLQ0o8yW+RKQBTbdfITHXAFcMUZdkqQx+A1VSeqQ4S5JHTLcJalDhrskdchwl6QOGe6S1CHDXZI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHjhruSTYluS3JA0nuT/Ke1n5ykluSfL3dv7i1J8kfJtmd5N4kr5n0QUiSnm2Unvsh4H1VdRZwDnBpkrOAbcCtVXUmcGtbB3gLg+umnglsBa5e8aolSUd01HCvqv1VdXdb/h7wILAB2ALsaLvtAC5oy1uAj9fA7cBJSU5b8colSYta0ph7klng1cAdwKlVtb9tehg4tS1vAB4aetje1nb4c21NMp9k/uDBg0ssW5J0JCOHe5IXAJ8B3ltV3x3eVlUF1FJeuKq2V9VcVc3NzMws5aGSpKMYKdyTnMAg2D9RVZ9tzY88PdzS7g+09n3ApqGHb2xtkqRVMspsmQDXAA9W1UeHNu0ELm7LFwM3DrX/Sps1cw7wxNDwjSRpFRw/wj6vBd4JfDXJrtb2QeBK4IYklwDfAi5s224Gzgd2Az8A3rWiFatrs9tumnYJUheOGu5V9SUgi2x+4wL7F3DpmHVJGjL8T2/PlW+dYiVaK0bpuUs6hhj0GoWnH5CkDhnuktQhw12SOmS4S1KHDHdJ6pCzZaQ1zJkzWozhrqnzi0vSynNYRpI6ZLhLUocMd0nqkOEuSR3yA1VNhR+iSpNlz12SOmS4S1KHDHdJ6tAol9m7NsmBJPcNtX0oyb4ku9rt/KFtlyfZneRrSd48qcIlPdvstpueuUmj9NyvA85boP2qqtrcbjcDJDkLuAh4RXvMHyc5bqWKlSSN5qjhXlVfBB4d8fm2ANdX1ZNV9U0G11E9e4z6JEnLMM6Y+2VJ7m3DNi9ubRuAh4b22dvaniPJ1iTzSeYPHjw4RhmSpMMtN9yvBl4KbAb2A3+w1Ceoqu1VNVdVczMzM8ssQ5K0kGWFe1U9UlVPVdUPgT/hR0Mv+4BNQ7tubG2SpFW0rHBPctrQ6i8CT8+k2QlclOR5Sc4AzgTuHK9ESdJSHfX0A0k+CbweOCXJXuC3gdcn2QwUsAf4dYCquj/JDcADwCHg0qp6ajKlS5IWc9Rwr6p3LNB8zRH2vwK4YpyiJEnj8cRhWjV+uUZaPZ5+QJI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOeFVLq0PAZOPdc+dYpVqJpsecuSR0a5UpM1wJvAw5U1Stb28nAp4BZBldiurCqHksS4GPA+cAPgF+tqrsnU7rWAs/hLk3HKD3364DzDmvbBtxaVWcCt7Z1gLcwuG7qmcBW4OqVKVOStBRHDfeq+iLw6GHNW4AdbXkHcMFQ+8dr4HbgpMMupi1JWgXLHXM/tar2t+WHgVPb8gbgoaH99ra250iyNcl8kvmDBw8uswxJ0kLG/kC1qgqoZTxue1XNVdXczMzMuGVIkoYsN9wfeXq4pd0faO37gE1D+21sbZKkVbTccN8JXNyWLwZuHGr/lQycAzwxNHwjSVolo0yF/CTweuCUJHuB3wauBG5IcgnwLeDCtvvNDKZB7mYwFfJdE6hZxyCnPErHlqOGe1W9Y5FNb1xg3wIuHbcoSdJ4/IaqJHXIc8tI64jnnFk/7LlLUocMd0nqkMMyUuecybQ+2XOXpA4Z7pLUIcNdkjrkmLuWzbFc6dhluEvrlHPe++awjCR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SerQWFMhk+wBvgc8BRyqqrkkJwOfAmaBPcCFVfXYeGVKmiSnRfZnJea5v6Gqvj20vg24taquTLKtrX9gBV5HxwC/uCStDZMYltkC7GjLO4ALJvAakqQjGDfcC/jLJHcl2draTq2q/W35YeDUhR6YZGuS+STzBw8eHLMMSdKwcYdlXldV+5L8JHBLkr8b3lhVlaQWemBVbQe2A8zNzS24jyRpecbquVfVvnZ/APgccDbwSJLTANr9gXGLlCQtzbLDPck/TfLCp5eBnwfuA3YCF7fdLgZuHLdISdLSjDMscyrwuSRPP8+fV9X/SvJl4IYklwDfAi4cv0xJq+XwGVFOjVyblh3uVfUN4FULtH8HeOM4RUmSxuP53HVUzm2X1h5PPyBJHbLnLmlknqZg7TDc9QyHX7QQfy/WJsN9nfMPV+qT4S5pWRyiObb5gaokdchwl6QOGe6S1CHDXZI65Aeqksbmh6vHHsO9U0f6Y3P6o9Q/w13SirIXf2ww3DuyWI/cnrq0/hjukiZmsY6FPfrJM9zXOHvlkhYysXBPch7wMeA44E+r6spJvZaktWWxcXl7+itnIuGe5Djgj4A3AXuBLyfZWVUPTOL1ejLKL7e9dUlHk6pa+SdNfg74UFW9ua1fDlBV/2mh/efm5mp+fn7F61gp4wTuYj0OA1oa32J/g+ulp5/krqqaW3DbhML97cB5VfXv2vo7gZ+tqsuG9tkKbG2r/xL42jJf7hTg22OUuxZ5zOuDx7w+jHPM/6KqZhbaMLUPVKtqO7B93OdJMr/Yf65eeczrg8e8PkzqmCd1bpl9wKah9Y2tTZK0CiYV7l8GzkxyRpITgYuAnRN6LUnSYSYyLFNVh5JcBvxvBlMhr62q+yfxWqzA0M4a5DGvDx7z+jCRY57IB6qSpOnyfO6S1CHDXZI6tKbCPcm1SQ4kuW+o7eQktyT5ert/8TRrXGmLHPPvJfm7JPcm+VySk6ZZ40pb6JiHtr0vSSU5ZRq1Tcpix5zkP7Sf9f1Jfnda9U3CIr/bm5PcnmRXkvkkZ0+zxpWUZFOS25I80H6e72ntE8mwNRXuwHXAeYe1bQNuraozgVvbek+u47nHfAvwyqr6aeD/AJevdlETdh3PPWaSbAJ+Hvh/q13QKriOw445yRuALcCrquoVwO9Poa5Juo7n/px/F/hwVW0Gfqut9+IQ8L6qOgs4B7g0yVlMKMPWVLhX1ReBRw9r3gLsaMs7gAtWtagJW+iYq+ovq+pQW72dwfcIurHIzxngKuD9QHezABY55ncDV1bVk22fA6te2AQtcswF/ERbfhHw96ta1ARV1f6qurstfw94ENjAhDJsTYX7Ik6tqv1t+WHg1GkWMwW/BvzFtIuYtCRbgH1Vdc+0a1lFLwf+dZI7kvxNkp+ZdkGr4L3A7yV5iME7ld7elQKQZBZ4NXAHE8qwHsL9GTWY19ldr24xSf4jg7d6n5h2LZOU5J8AH2TwNn09OR44mcFb+N8EbkiS6ZY0ce8GfqOqNgG/AVwz5XpWXJIXAJ8B3ltV3x3etpIZ1kO4P5LkNIB239Vb18Uk+VXgbcAvV/9fVngpcAZwT5I9DIah7k7yz6Za1eTtBT5bA3cCP2RwkqmeXQx8ti3/D6CbD1QBkpzAINg/UVVPH+dEMqyHcN/J4BeCdn/jFGtZFe1CKO8HfqGqfjDteiatqr5aVT9ZVbNVNcsg9F5TVQ9PubRJ+5/AGwCSvBw4kf7PmPj3wL9py+cCX59iLSuqveu6Bniwqj46tGkyGVZVa+YGfBLYD/wjgz/wS4CXMPiE+evAXwEnT7vOVTjm3cBDwK52+6/TrnPSx3zY9j3AKdOucxV+zicC/x24D7gbOHfada7CMb8OuAu4h8F49L+adp0reLyvYzDkcu/Q3+75k8owTz8gSR3qYVhGknQYw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR16P8Dfl09WqDbmzoAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "binned_data_vis = data.make_binned(bins=100)\n",
    "\n",
    "v, e = minkit.data_plotting_arrays(binned_data)\n",
    "\n",
    "c = 0.5 * (e[1:] + e[:-1])\n",
    "\n",
    "plt.hist(c, bins=e, weights=v);"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
