{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Determining the stability of the fits\n",
    "After doing a fit, it is quite common to validate the result that has been obtained, since the stability and the type of minimum (global or local) is not reflected by the FCN or by the minimizer. In this section, several tools meant to evaluate the quality of the fits, and included in the Minkit package, are discussed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scanning the FCN\n",
    "The most common operation to do after a fit is to scan the profile of the FCN for the variables involved in it. This can be done in many different ways: fixing the rest of the parameters and evaluating the minimization function, mapping the full paramter space by varing all the parameters, or doing a fit for fixed values of one of the parameters (typically done by MINOS). In the Minkit package an easy and fast solution to the first two items is proposed using the *minkit.fcn_profile* function. Let's see how to do it on a fit to a Gaussian function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------------------------------------------------------------\n",
      "| FCN = 2.821E+04               |      Ncalls=91 (91 total)      |\n",
      "| EDM = 3.41E-07 (Goal: 1E-05)  |            up = 1.0            |\n",
      "------------------------------------------------------------------\n",
      "|  Valid Min.   | Valid Param.  | Above EDM | Reached call limit |\n",
      "------------------------------------------------------------------\n",
      "|     True      |     True      |   False   |       False        |\n",
      "------------------------------------------------------------------\n",
      "| Hesse failed  |   Has cov.    | Accurate  | Pos. def. | Forced |\n",
      "------------------------------------------------------------------\n",
      "|     False     |     True      |   True    |   True    | False  |\n",
      "------------------------------------------------------------------\n",
      "------------------------------------------------------------------------------------------\n",
      "|   | Name |   Value   | Hesse Err | Minos Err- | Minos Err+ | Limit-  | Limit+  | Fixed |\n",
      "------------------------------------------------------------------------------------------\n",
      "| 0 | c    |   0.007   |   0.010   |            |            |   -1    |    1    |       |\n",
      "| 1 | s    |   0.992   |   0.007   |            |            |   0.7   |   1.3   |       |\n",
      "------------------------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import minkit\n",
    "\n",
    "x = minkit.Parameter('x', bounds=(-4, +4))\n",
    "c = minkit.Parameter('c', 0., bounds=(-1, +1))\n",
    "s = minkit.Parameter('s', 1., bounds=(0.7, 1.3))\n",
    "g = minkit.Gaussian('g', x, c, s)\n",
    "\n",
    "data = g.generate(10000)\n",
    "\n",
    "with minkit.minimizer('uml', g, data) as minimizer:\n",
    "    result = minimizer.migrad()\n",
    "    \n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to scan the variables, we must define the points to be evaluated as a numpy array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "c_scan = np.linspace(*c.bounds, 40)\n",
    "s_scan = np.linspace(*s.bounds, 40)\n",
    "\n",
    "c_fcn = minkit.fcn_profile('uml', g, data, 'c', c_scan)\n",
    "s_fcn = minkit.fcn_profile('uml', g, data, 's', s_scan)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, (ax0, ax1) = plt.subplots(1, 2, figsize=(12, 4))\n",
    "\n",
    "ax0.plot(c_scan, c_fcn, '.');\n",
    "ax0.set_xlabel('center');\n",
    "ax0.set_ylabel('FCN value');\n",
    "ax1.plot(s_scan, s_fcn, '.');\n",
    "ax1.set_xlabel('standard deviation');\n",
    "ax1.set_ylabel('FCN value');\n",
    "\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In case we want to map the two-dimensional parameter space, we just need to specify the two parameters as input variables and define the values as a grid."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "grid = np.array([a.flatten() for a in np.meshgrid(c_scan, s_scan)])\n",
    "\n",
    "fcn = minkit.fcn_profile('uml', g, data, ('c', 's'), grid)[::-1] # need to reverse for \"imshow\"\n",
    "\n",
    "fig, ax = plt.subplots(1, 1, figsize=(6, 5))\n",
    "\n",
    "fcn = fcn.reshape((len(c_scan), len(s_scan)))\n",
    "\n",
    "m = ax.imshow(fcn, extent=(*c.bounds, *s.bounds), aspect = 'auto')\n",
    "ax.set_xlabel('center');\n",
    "ax.set_ylabel('standard deviation');\n",
    "fig.colorbar(m, ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluating residuals and pulls\n",
    "Another common operation that is performed once a fit is done is to look at the residuals or the pull plots of the binned distribution. To do this correctly, it is necessary that we evaluate the resulting PDF in the bins of the distribution, and thus a binned data set must be constructed. In the following lines we will plot the result of the fit together with the distribution of the residuals below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "values, edges = minkit.data_plotting_arrays(data, bins=100)\n",
    "\n",
    "gx, pdf_values = minkit.pdf_plotting_arrays(g, values, edges)\n",
    "\n",
    "fig, (ax0, ax1) = plt.subplots(2, 1, figsize=(7, 6), gridspec_kw={'height_ratios': (3, 1)}, sharex=True)\n",
    "\n",
    "centers = 0.5 * (edges[1:] + edges[:-1])\n",
    "\n",
    "ax0.hist(centers, edges, weights=values, histtype='step', color='k');\n",
    "ax0.plot(gx, pdf_values, color='blue');\n",
    "ax1.plot(x.bounds, (0, 0), color='red');\n",
    "\n",
    "binned_ds = minkit.BinnedDataSet.from_ndarray(edges, x, values)\n",
    "\n",
    "pdf_r = values.sum() * g.evaluate_binned(binned_ds).as_ndarray() # evaluate_binned is normalized to unity\n",
    "\n",
    "res = values - pdf_r\n",
    "\n",
    "pos = res > 0\n",
    "\n",
    "w = edges[1] - edges[0]\n",
    "\n",
    "ax1.bar(centers[pos], res[pos], width=w, color='skyblue');\n",
    "ax1.bar(centers[~pos], res[~pos], width=w, color='skyblue');\n",
    "ax1.set_xlim(*x.bounds)\n",
    "ax1.set_ylim(-25, +25);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
